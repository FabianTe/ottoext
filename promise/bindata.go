package promise

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _js_gitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd2\xcf\xcb\x4f\x49\x8d\xcf\xcd\x4f\x29\xcd\x49\x2d\xe6\x02\x04\x00\x00\xff\xff\x99\x1d\xdc\xd1\x0e\x00\x00\x00")

func js_gitignore_bytes() ([]byte, error) {
	return bindata_read(
		_js_gitignore,
		"js/.gitignore",
	)
}

func js_gitignore() (*asset, error) {
	bytes, err := js_gitignore_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/.gitignore", size: 14, mode: os.FileMode(420), modTime: time.Unix(1443770584, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _js_bundle_js = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x58\x5f\x8f\xdb\xb8\x11\x7f\xbe\x7c\x0a\x59\x0f\x86\x78\xcb\x55\xec\xb4\x0f\x85\x14\xc6\xc8\x43\x0f\x08\x7a\x4d\x0e\xb8\xbc\x19\xc6\x42\x91\xa8\x35\x7b\x32\x65\x50\x94\x37\x0b\xaf\xbe\x7b\x67\xf8\x47\xa2\xd6\xde\xbb\x6d\x8b\x5e\x80\x78\x29\x72\x38\x9c\xbf\xbf\x19\x72\x51\xf7\xb2\xd4\xa2\x95\x89\x26\x67\x3f\x8e\x64\xa2\xc8\x59\xd4\x09\xdf\xaa\x1d\x51\x5c\xf7\x4a\x46\x38\x4e\xf9\xf7\x63\xab\x74\x97\x9f\x0a\x15\xb5\x0c\xa7\xd8\xd9\xcd\x65\xe7\x81\x8a\x2a\x53\xb4\x69\x8b\x8a\x57\xd9\x62\x3d\xe4\x6e\xab\xc6\xad\x65\xd1\x34\x49\xeb\x39\xd0\x96\x4e\x63\x49\xe0\xc3\x6e\x63\x8b\xd5\xb4\x30\xe0\x31\x9c\x9d\x47\x46\x32\x3d\x30\x4d\x65\x5a\x32\x0e\xbf\x47\x16\xc7\x54\x26\x2b\x32\x24\xdb\x49\x0d\x2a\x29\x27\xe7\xb8\xef\x78\xd4\x69\x25\x4a\x1d\xe7\x3c\xf9\x2b\x19\xe8\x73\x92\x24\x98\x50\xcf\x76\x8c\x96\x68\x91\x9a\x9c\xf5\x5e\x74\xe9\x9d\xa8\xe0\x74\x3b\x2c\x1b\x5e\xa8\x9f\x24\x93\x46\x46\xc1\x78\xf2\x17\x92\x4a\xfe\x5d\x7f\x15\xe5\x6f\xb4\x64\x3f\x39\x06\xe9\x51\xb5\xba\xd5\x8f\x47\x9e\x16\xc7\x63\xf3\x48\x7b\xf6\x51\xa9\xe2\x31\x98\xef\x1a\x51\x72\x5a\x83\x9a\xb4\x60\xab\x5c\xa6\x1d\x07\x2e\x07\xde\xf6\x9a\x8d\x22\x92\xb3\x37\x01\x7f\x00\xa1\x4a\x6b\xce\x89\x92\x3e\x08\x59\xb5\x0f\xb4\x50\xf7\xfd\x81\x4b\xdd\x11\x6a\x44\x74\xcb\xa0\xbe\xe1\xfb\x49\x6a\xae\x4e\x45\xf3\x0a\xc6\x9e\xf4\x25\xce\x7e\xdd\xb0\x0e\xcf\x62\xee\xf3\xf2\x2c\x08\x31\x0d\x6b\x6d\xc7\x13\xd8\xd5\x06\x36\xe8\xa5\xe2\x35\x0b\x67\xf0\x3b\x10\x72\x4e\x6e\x78\x84\xcb\x33\xa7\x58\x15\x9c\xd8\xde\x73\x46\x4c\x2e\x55\xdb\x84\x02\xa1\x6f\x43\xd9\x13\x8d\xb4\x0d\x77\x9f\x9f\x2a\x42\xe7\x33\xe0\x70\xe0\xd3\xcb\x0b\x4e\xff\x29\x9f\xdb\x35\x32\xba\x33\x8a\x7f\x04\x1e\x27\x0e\x76\x2b\xec\xe0\xf5\x5c\x4d\x22\x4a\x36\x9f\xcf\xe5\x07\xb6\x5a\x2e\x2f\xa8\xd9\x14\x2e\x49\x68\xbb\xf4\xae\x95\x6e\x7e\xb9\x0c\xbf\xd0\x4b\x92\x8c\xb1\x73\x38\xf0\x4a\x14\x9a\xb3\xd8\xef\x8e\x19\x43\x7f\xb4\x75\xa4\x37\x3a\x0b\xc5\xb6\x99\x5b\xdc\xdc\x50\xc5\xc6\xc8\x49\x1b\x2e\xef\xf5\xfe\xfd\xbb\xcd\x62\x9d\xf5\xd6\x4d\xe3\x22\x5d\x13\x9f\xe6\xf5\x96\xef\x10\x08\x44\x28\x26\x4e\x82\x52\x6a\xa3\x6d\x26\x25\xb2\x6f\x1a\x48\xdc\x4c\x5b\x46\xf8\x49\x7c\x28\x8e\xb2\x26\x1c\xe4\x27\x94\x0f\x17\x2b\xd7\xb4\x50\x1b\x35\xd3\xa2\xe2\x0d\xd7\x1c\xe4\xd1\xbb\x61\x20\xee\x1c\xca\x93\x35\x99\x19\xc4\xce\xcc\xd9\x5f\x01\x1c\xb4\x89\xca\x27\x9d\x5a\x2a\xc8\xf9\xed\x8f\x8b\xe8\x73\x81\x6e\x8f\x7e\x51\xed\x41\x00\x08\x7d\x91\xcd\xe3\x9b\x1f\x22\xf8\x77\x5a\xa5\x7f\x4b\xd7\x51\x52\x92\xe8\x1f\x8f\x0d\x8f\x7e\x15\x87\x63\xd7\x4a\xbb\xf8\xcf\x4f\x5f\xa3\x9f\x01\x3a\x64\xc7\xb3\x68\xaf\xf5\x31\x7b\xfb\xf6\x9e\x6b\x51\x3f\xa6\x07\xa1\x6f\x1b\xbb\x94\xb6\xea\xfe\xcd\x0f\x3f\xbe\x7d\x33\xc3\xb7\x45\x28\x04\x2d\x01\xec\xb7\xed\x8e\xe1\xcf\xd3\x53\x99\x10\x1a\xf7\xb2\xe2\xb5\x90\xbc\x8a\x17\xa3\x8b\x31\x38\x1c\x32\x6f\xc6\x91\xd9\x94\x25\xea\x0a\xa2\xe0\xca\x30\x1a\x0d\x6c\xa0\x09\x5d\x24\xa7\x56\x54\xd1\x6a\xc1\x98\x32\x21\xea\xd9\x28\x02\x8e\x4a\x62\x67\x83\xf8\xaa\x04\xed\xa6\xcd\xec\x76\x1a\x06\x86\xc7\x6a\x6d\xf3\xf9\x98\x16\x55\x65\x86\x74\xff\xf4\x94\xec\xd9\x21\x39\xa6\x95\x2a\x04\x86\x72\x50\xe2\x5c\x94\x82\x68\xa3\x86\x63\x9d\x81\x58\x82\xa0\x78\x7a\x8a\xdb\x6f\xff\xe2\x60\xb0\x05\xe3\xcb\xe5\x14\x30\xf0\x09\x9c\x31\xef\xf4\x9e\xc3\x39\x57\x42\x49\x6e\x24\x96\xc0\xf1\x3c\x8e\x92\xb6\x2a\xc1\x23\x35\xc0\xbc\x7e\x6f\x90\xa9\xdc\x83\x5c\x2e\x2f\x72\x7d\x73\x43\x54\x82\xf3\x74\xcd\x80\x13\x12\x74\x1a\x82\x69\x33\xd1\x42\x28\xa6\x5d\x5f\x96\xbc\xeb\xb2\xf9\x6c\x5d\x88\xa6\x57\x9c\xce\x66\x49\x7e\x71\x0c\x5b\x4d\x52\xc1\x69\xe0\x19\x65\x2d\x01\xa1\x90\x6b\xf5\x78\xe6\x70\xf6\x62\xbd\x51\x80\xc1\xa8\x3c\x38\xe9\xd0\xdd\x93\x2c\x81\x82\x8f\x2b\xab\x8d\x99\xc8\xb8\x75\xad\x73\x88\x25\xa2\x2d\x50\x28\x44\x6a\xf4\xe2\xc4\xe2\x2b\x18\xe5\xef\x4a\x81\xfe\xde\xc3\xb7\x46\xa4\xa8\x7c\x84\xb4\x89\x09\x70\x17\x0c\x82\x91\x90\x8d\x70\x9d\x02\xc5\xcd\x5d\xdb\x9c\x38\xf5\x6c\x48\x36\xce\x21\xe9\x50\x16\xba\xdc\x43\x72\x9c\xc7\x73\x4a\x32\x0c\x41\xed\x76\x8a\x09\xa8\xba\x68\x86\x1c\x5a\x9a\x45\x9f\x42\x0e\xdc\xdf\x73\xc5\x2b\x72\x0e\x3e\x10\x70\xfa\x14\x62\x0e\xc2\xb2\x67\x66\x44\x8c\x39\x8c\x64\x10\x9e\x9b\x19\x6a\x5a\x3f\x62\xd1\xac\x93\xde\x12\x3a\xc9\x55\x18\x9c\xad\x03\x2b\x1d\xd4\xcf\x21\x24\x28\xaf\x11\x78\xd5\xb0\x3a\x59\xa6\x18\xce\x00\x41\x59\xd2\xa3\x9d\x99\x02\x51\x4d\x64\xb0\x35\x8c\x42\xef\x7e\x00\xe4\xd7\x09\xa7\xfd\x68\x9f\x62\x64\xe2\xa5\xa5\x05\xf0\x9a\xec\x54\xe2\x39\x06\x9c\xac\x95\xd4\x64\x14\x88\x72\x35\x37\x91\x72\x26\x52\xcc\x8c\x08\x4c\xa0\x40\x12\xfe\x5a\x81\xde\xc1\xe8\x9a\x40\x2a\xcc\xbe\xde\x62\x22\x46\x9e\x4f\x8a\x16\x92\xa2\x7d\x3f\xe6\x42\x0b\xb9\x10\xa0\x14\x96\x29\xef\x7a\x09\xb8\x42\x4c\xe6\x25\x21\x58\x43\x4c\x50\x6c\x74\x14\xe0\x48\x1b\x9c\x55\x9b\xbe\x03\xb3\x00\xe4\xf5\x0d\x5c\xa0\x53\x90\xa4\xc5\x48\xea\x22\xd8\x93\x5b\xd5\x56\x97\x7b\x83\x6c\x63\xdb\x9d\xfd\x42\x7b\xd8\xac\x98\x38\x77\x68\x63\x08\xbf\x10\x43\x3c\x52\x10\xbd\x57\xed\x43\x14\xe4\xc8\xe7\x56\x47\x45\x34\x92\x12\x0c\x5c\x84\x4c\xdb\xcc\xdc\x7d\xfe\xe5\xcb\xdd\xdd\x4b\xbb\x9c\xe4\xb1\xcb\x7c\x47\xcd\xd6\xb9\xf5\x30\xc6\x40\x61\x30\xc6\x11\xa0\x1d\x27\xf0\x96\xb4\x75\x39\xc3\xce\x1e\x66\x5e\x42\x37\x40\x61\x0b\x39\xd7\x28\x10\xab\x83\x2b\x80\x18\x2d\x8a\x02\x58\xa3\xb5\x12\xca\x51\x5f\x6a\x90\x7d\xde\x91\x5d\xb7\x13\xc2\xf1\x7f\x69\x3d\x1f\x3a\xe0\x4e\xe1\xa0\x02\x1a\x39\x32\x46\xea\xb1\xef\xf6\x89\x20\xd4\x94\x25\xeb\x6c\x1f\xb4\x74\x94\x7c\x30\xde\xdd\xc6\x26\xab\xe2\xdd\xac\x4b\xf3\x17\x1d\x6f\xd0\x11\x15\xc9\x60\xa0\x41\xce\xb0\x32\xdc\xd9\x7a\xd0\xd0\xb3\x8e\x61\xcc\x59\xb3\xe0\x53\x59\x04\xd3\x02\x72\x18\x1d\xd5\xd0\x3d\x3d\xd2\x8a\x7d\x31\x95\x2a\x68\x92\x75\xfb\x2b\x44\xaa\xbc\xa7\x07\x76\xad\x98\x8a\xcd\x15\x05\x04\x8c\x87\x6c\xea\x13\x8d\xf0\x8e\xb3\xe5\x00\xf0\x7d\xe4\x4a\x3f\x26\xd0\x92\xc7\xdf\x63\x7a\x06\x33\xce\x3b\x6a\x9b\xd6\x8e\xe1\xf5\xbd\x48\x05\x51\xd6\xf4\x3c\xe3\xf4\x41\x09\x5d\x7c\x6b\x38\x06\x14\xc4\x44\x2d\xee\x7b\x65\xbe\xd5\x02\xeb\x10\x28\xef\xb4\x7f\x24\xe7\xe7\x27\x4d\x96\xdf\xca\x1d\x5c\x0a\xf5\x30\x1c\xd9\xef\xf4\x06\xc6\x41\xb5\x1c\xd3\x9a\x37\x35\x40\x97\x19\xe3\xe5\xcd\xa7\xad\xeb\x0b\xa8\x72\xe1\x7b\x86\x8e\x22\x9b\xf7\x6d\x36\x93\xb4\xf9\xa0\x7c\xc3\xed\x7e\x95\x49\xc0\x66\x0e\xff\x95\xe7\x45\x4d\xeb\x91\x5d\x96\x8e\x1c\x91\x4f\x42\x4d\xdd\x3b\xd2\x5c\xe7\x44\x83\x74\x0e\xf1\x8d\x74\x70\x6f\x80\x2e\x03\x79\x03\x62\x27\xb6\xdf\x3f\xb1\xc6\x58\x3f\x48\xa0\x98\x76\x74\x31\x35\xd0\xdd\x14\x06\xec\x44\x21\xee\x68\xec\x70\x20\xa6\x2b\x24\x84\xb9\x8e\xc6\x2e\x2b\x62\xfa\xbc\x73\x97\xae\x10\x38\xdb\x42\xeb\xe3\xfa\x20\x16\x34\x83\xa6\x45\xf1\xf8\x02\xed\x3f\xda\x23\x40\x64\xe3\x9d\x17\x10\xef\x6a\x26\xf3\x57\x64\x32\x4a\x38\x60\x43\xef\xe4\x37\x42\xd1\x2b\x81\xec\x51\xe6\xff\x2c\x0f\x9f\xc9\x03\x6e\xfb\x03\x5b\xc6\x5b\x6b\xc8\xc8\x3c\x02\xec\xe0\xb0\xca\x79\x9b\x6c\xe4\x95\x66\xc9\x1c\x08\x75\x09\xa9\xb1\x4b\x5a\x19\x9b\xdb\x12\x69\x36\xd8\x8a\xb8\xdd\x91\xe7\xe6\x37\x49\x78\x5d\x5d\x7e\x55\x5d\xf5\x0a\x75\x6d\x9d\xf6\x02\x50\x61\xdf\x32\xa0\xda\xd2\x12\xaa\x77\x0f\x36\xd6\xf4\x19\x94\x43\x0f\x0a\x19\x76\x73\x53\x82\xe4\xed\x72\xc9\x01\xc3\x4c\x89\x9e\x9c\x58\x94\x7f\x14\x81\xff\xab\xd5\xfe\x0c\xd3\x5c\x53\x1e\x5a\x95\x49\xd9\x0e\x7f\xfd\x6d\xe8\xf2\xb2\x84\xea\x42\x82\x5f\x5e\x2e\x9f\x5d\x24\x5f\x7a\xa8\xc2\xfb\x45\x81\x0d\x49\xe9\xc3\xa3\x66\x25\xd6\x58\xc0\xce\xa4\x26\x59\xc7\x6e\xd7\xb4\x76\x6b\xcb\xa5\x4a\x48\x78\x0b\x30\xf6\x58\x14\x1e\x9b\x82\x87\x02\x4e\x72\x60\xbb\xca\x7d\x9b\x06\xbd\x82\x6f\xd1\x64\x6e\xbb\xb7\x92\xd5\xb4\x86\xee\x27\xbf\xb9\xe9\xde\xc3\x64\xb9\x5c\x96\xdb\x6e\x97\xaa\x1e\xf4\xcb\xcd\xc1\xd3\xae\xa1\x64\xe6\xe2\x6e\x65\x9d\x3d\x6e\xcc\x7b\xf7\x00\xaf\xfb\x11\xb0\x8d\x4b\xa1\x74\x8f\x74\x02\xdf\x86\x50\xae\x12\x7b\xfc\xf1\x36\x09\xf0\x88\x12\xd9\x53\x50\x82\xbc\x1f\x5f\xe7\xd8\x65\xac\x61\x80\xd8\x50\x7e\xfe\x56\x71\xbb\x36\xcd\xd7\xf3\xe9\x0f\x6b\xe2\x0d\x02\x2d\x78\xce\xdf\x3f\x27\xc8\x39\xf4\xaf\x72\xcb\x6f\xd7\xbb\xe9\xfd\x63\xcb\x77\x79\x6d\x9b\x0d\xfb\xda\x86\x3a\x12\xba\x86\x3a\xe7\xcd\xf3\xf4\x54\x3c\x3d\x05\xe6\x57\x74\xf5\xec\xa9\x0c\xac\x7a\xf1\xf2\x05\xdf\xe1\xa3\xc8\x64\x2a\xd8\x0b\x57\x1c\xa1\x1b\xce\xe2\x6f\x10\xc2\x1d\x87\x52\xd1\xa7\x6e\x68\xaf\x3c\x5c\x9e\xd0\x5e\x3d\xec\xb8\x3f\xa1\xd1\xfa\xf4\xc4\x55\x07\xec\xf1\x7d\x75\xfc\xe8\x2c\x11\xcc\x0a\xa4\xad\xaa\x9f\x45\xa7\xb9\x04\x2e\xc2\x4c\x97\xdc\x0e\xea\xda\xfc\x55\xfc\xd0\x9e\xf8\x8c\xc6\x4e\x7d\x6c\x1a\x3f\xdb\x99\x69\x7e\x10\xda\x0c\xbe\x09\x59\x41\xbf\x32\x7f\x2f\x34\x89\x87\xd6\x72\x89\x07\x86\xc0\xa6\xd4\x13\x47\xa2\x8b\x24\xe4\x62\xd7\x1f\xd1\xf3\xd0\xe0\x18\x95\xcb\x87\xea\xf2\x41\x22\x7e\x1b\x9b\xb5\x7d\x25\xd4\xeb\x0e\x31\xa4\x2f\x1c\xd1\x1f\x8a\xee\xb7\x2b\xaf\x1e\xab\xe1\xf7\x9e\x9a\x31\xa6\xc7\x28\x95\xa9\xbb\x0c\x33\x9e\xbc\x7b\x0d\x3a\x90\x01\x2e\xf4\xff\x0e\x00\x00\xff\xff\x0c\x87\xbd\xc7\xb3\x17\x00\x00")

func js_bundle_js_bytes() ([]byte, error) {
	return bindata_read(
		_js_bundle_js,
		"js/bundle.js",
	)
}

func js_bundle_js() (*asset, error) {
	bytes, err := js_bundle_js_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "js/bundle.js", size: 6067, mode: os.FileMode(420), modTime: time.Unix(1443815886, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/.gitignore": js_gitignore,
	"js/bundle.js": js_bundle_js,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"js": &_bintree_t{nil, map[string]*_bintree_t{
		".gitignore": &_bintree_t{js_gitignore, map[string]*_bintree_t{
		}},
		"bundle.js": &_bintree_t{js_bundle_js, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

